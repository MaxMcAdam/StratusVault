syntax = "proto3";

package fileservice.v1;
option go_package = "./proto";

import "proto/common.proto";
import "google/protobuf/empty.proto";

service FileService {
  // Upload a file using streaming
  rpc UploadFile(stream UploadFileRequest) returns (UploadFileResponse);
  
  // Download a file using streaming  
  rpc DownloadFile(DownloadFileRequest) returns (stream DownloadFileResponse);
  
  // List files with pagination
  rpc ListFiles(ListFilesRequest) returns (ListFilesResponse);
  
  // Get file metadata
  rpc GetFileInfo(GetFileInfoRequest) returns (FileInfo);
  
  // Delete a file
  rpc DeleteFile(DeleteFileRequest) returns (google.protobuf.Empty);
  
  // List file changes
  rpc GetFileEvents(GetFileEventsRequest) returns (GetFileEventsResponse);
}

message UploadFileRequest {
  oneof request {
    FileMetadata metadata = 1;
    FileChunk chunk = 2;
  }
}

message FileMetadata {
  string name = 1;
  string content_type = 2;
  string mime_type = 3;
  int64 size = 4;
  bool overwrite = 5;
  map<string, string> custom_metadata = 6;
}

message UploadFileResponse {
  string file_id = 1;
  int64 bytes_written = 2;
}

message DownloadFileRequest {
  string file_id = 1;
  string file_name = 2;
  int64 limit = 3;       // Optional: limit bytes
}

message DownloadFileResponse {
  FileChunk chunk = 1;
}

message ListFilesRequest {
  int32 page_size = 1;
  uint64 page_token = 2;
  string filter = 3;     // Simple filter like "name=*.txt"
}

message ListFilesResponse {
  repeated FileInfo files = 1;
  uint64 next_page_token = 2;
  int32 total_count = 3;
}

message GetFileInfoRequest {
  string file_id = 1;
  string file_name = 2;
}

message DeleteFileRequest {
  string file_id = 1;
  string file_name = 2;
}

message GetFileEventsRequest {
  repeated file_id_token tokens = 1;           
}

message file_id_token {
  string id = 1;
  string name = 2;
  uint64 last_token = 3;
}

message GetFileEventsResponse {
  repeated FileEvent events = 1;      
  bool has_more = 3;            
  int32 events_returned = 4;    
}

message FileEvent {
  enum EventType {
    EVENT_TYPE_CREATED = 0;
    EVENT_TYPE_UPDATED = 1;
    EVENT_TYPE_DELETED = 2;
    EVENT_TYPE_RENAMED = 3;
  }
  
  EventType event_type = 1;
  string id = 2;
  string name = 3;
  uint64 next_token = 4;  
}